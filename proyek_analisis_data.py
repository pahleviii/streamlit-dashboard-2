# -*- coding: utf-8 -*-
"""Proyek Analisis Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ug4Ox4qIFDSo1koFA0XiNJE-ce12rECy

# Proyek Analisis Data: [Input Nama Dataset]
- **Nama:** [Reza Pahlevi]
- **Email:** [mc284d5y2330@student.devacademy.id]
- **ID Dicoding:** [MC284D5Y2330]

## Menentukan Pertanyaan Bisnis

- Kota mana saja yang berada di top 10 jumlah pesanan terbanyak??
- Di kota mana saja para penjual berada, dan negara bagian mana yang memiliki jumlah penjual terbanyak?

## Import Semua Packages/Library yang Digunakan
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""## Data Wrangling

### Gathering Data
"""

customers_df = pd.read_csv("/content/olist_customers_dataset.csv")
customers_df.head()

"""**Insight:**
pd.read_csv("/content/olist_customers_dataset.csv")

Kode ini digunakan untuk membaca dataset olist_customers_dataset.csv menggunakan pandas dan menyimpannya ke dalam variabel customers_df.
Dataset ini berisi informasi pelanggan, seperti ID pelanggan, kode pos, kota pelanggan, dan negara bagian pelanggan.
customers_df.head()

Kode ini menampilkan 5 baris pertama dari dataset agar kita bisa melihat struktur dan isinya.
"""

orders_df= pd.read_csv("/content/olist_orders_dataset.csv")
orders_df.head()

"""**Insight:**
pd.read_csv("/content/olist_orders_dataset.csv")
Membaca dataset olist_orders_dataset.csv menggunakan pandas dan menyimpannya dalam variabel orders_df.
Dataset ini berisi informasi tentang pesanan pelanggan, termasuk status pesanan, waktu pemesanan, dan tanggal estimasi pengiriman.

orders_df.head()
Menampilkan 5 baris pertama dari dataset untuk melihat strukturnya.

"""

products_df= pd.read_csv("/content/olist_products_dataset.csv")
products_df.head()

"""**Insight:**
pd.read_csv("/content/olist_products_dataset.csv")
Membaca dataset olist_products_dataset.csv menggunakan pandas dan menyimpannya dalam variabel products_df.
Dataset ini berisi informasi produk, termasuk kategori, dimensi, dan berat produk.

products_df.head()
Menampilkan 5 baris pertama dari dataset untuk melihat strukturnya.
"""

sellers_df = pd.read_csv("/content/olist_sellers_dataset.csv")
sellers_df.head()

"""**Insight:**
pd.read_csv("/content/olist_sellers_dataset.csv")
Membaca dataset olist_sellers_dataset.csv menggunakan pandas dan menyimpannya dalam variabel sellers_df.
Dataset ini berisi informasi tentang penjual di platform e-commerce.

sellers_df.head()
Menampilkan 5 baris pertama dari dataset untuk melihat strukturnya.

### Assessing Data
"""

customers_df.info()
customers_df.isna().sum()

"""**Insight:**
Menampilkan struktur data, termasuk jumlah entri (99.441 baris), jumlah nilai non-null di setiap kolom, dan tipe data masing-masing kolom.
Tidak ada nilai null dalam dataset (Non-Null Count sama dengan total baris).
customers_df.isna().sum()

Menghitung jumlah nilai yang hilang (NaN) di setiap kolom.
Hasilnya semua nol (0), berarti tidak ada missing values.

"""

print("Jumlah duplikasi: ", customers_df.duplicated().sum())
customers_df.describe()

"""**Insight:**
Jumlah Data Pelanggan
Dataset ini memiliki total 99.441 pelanggan yang unik, tanpa adanya duplikasi data.

Distribusi Kode Pos Pelanggan (customer_zip_code_prefix)

Mean (Rata-rata): 35.137
Standar Deviasi (std): 29.797 (menunjukkan bahwa ada variasi yang cukup besar dalam kode pos pelanggan)
Min & Max:
Kode pos pelanggan terendah: 1.003
Kode pos pelanggan tertinggi: 99.990
Kuartil:
25% pelanggan memiliki kode pos di bawah 11.347
50% pelanggan memiliki kode pos di bawah 24.416 (median)
75% pelanggan memiliki kode pos di bawah 58.900
Tidak Ada Data Duplikat
Dari pengecekan duplikasi, tidak ditemukan entri yang berulang dalam dataset pelanggan.
"""

plt.figure(figsize=(10, 5))
sns.histplot(customers_df["customer_zip_code_prefix"], bins=50, kde=True)
plt.xlabel("Kode Pos Pelanggan")
plt.ylabel("Jumlah Pelanggan")
plt.title("Distribusi Kode Pos Pelanggan")
plt.grid(True)
plt.show()

"""**Insight:**
Distribusi Kode Pos Pelanggan

Histogram ini menunjukkan distribusi kode pos pelanggan dengan sumbu X sebagai kode pos dan sumbu Y sebagai jumlah pelanggan.
Terlihat beberapa puncak yang menunjukkan adanya konsentrasi pelanggan di kode pos tertentu.
Distribusi memiliki kecenderungan menurun seiring dengan meningkatnya nilai kode pos.
"""

customer_counts = customers_df["customer_city"].value_counts().head(10)  # Top 10 kota dengan pelanggan terbanyak

# Membuat plot batang
plt.figure(figsize=(12, 6))
customer_counts.plot(kind="bar", color="skyblue")
plt.xlabel("Kota")
plt.ylabel("Jumlah Pelanggan")
plt.title("Jumlah Pelanggan per Kota (Top 10)")
plt.xticks(rotation=45)
plt.grid(axis="y", linestyle="--", alpha=0.7)

# Menampilkan plot
plt.show()

"""**Insight:**
Kota dengan Pelanggan Terbanyak

São Paulo memiliki jumlah pelanggan terbanyak, jauh melampaui kota lainnya.
Kota kedua dengan pelanggan terbanyak adalah Rio de Janeiro, tetapi dengan selisih yang cukup signifikan dibandingkan São Paulo.
Kota-kota lain dalam daftar memiliki jumlah pelanggan yang lebih merata, tetapi tetap jauh lebih rendah dibandingkan dua kota teratas.
"""

orders_df.info()
orders_df.isna().sum()

"""**Insight:**
Jumlah Data & Struktur Dataset

Dataset memiliki 99.441 entri dan terdiri dari 8 kolom.
Mayoritas kolom bertipe object (string), kecuali kolom yang berisi tanggal (datetime64[ns]).

Missing Values (Data Hilang)
Kolom order_approved_at memiliki 160 data hilang
Kolom order_delivered_carrier_date memiliki 1.783 data hilang
Kolom order_delivered_customer_date memiliki 2.085 data hilang

"""

print("Jumlah duplikasi: ", orders_df.duplicated().sum())
orders_df.describe()

"""**Insight:**
orders_df.duplicated().sum() menunjukkan hasil 0, artinya tidak ada data yang duplikat dalam dataset ini
"""

products_df.info()
products_df.isna().sum()

"""**Insight:**
Tidak Ada Missing Values (Null Values)
products_df.isna().sum() menunjukkan hasil 0 untuk semua kolom, berarti tidak ada data yang hilang dalam dataset ini.
"""

print("Jumlah duplikasi: ", products_df.duplicated().sum())
products_df.describe()

"""**Insight:**
Tidak Ada Data Duplikat

products_df.duplicated().sum() menghasilkan 0, berarti tidak ada baris duplikat dalam dataset.
Kolom Kategori Produk (product_category_name)

Ada 73 kategori unik dari total 32.951 data.
Kategori dengan frekuensi terbanyak adalah "cama_mesa_banho" (kategori tempat tidur, meja, dan kamar mandi) dengan 3.639 kemunculan.

"""

sellers_df.info()
sellers_df.isna().sum()

"""**Insight:**
Tidak Ada Data Kosong (Missing Values)

Semua 3.095 entri memiliki data lengkap di semua kolom.
Struktur Dataset

Dataset ini terdiri dari 4 kolom:
seller_id → ID unik penjual (object)
seller_zip_code_prefix → Prefix kode pos (int64)
seller_city → Kota penjual (object)
seller_state → Provinsi/negara bagian penjual (object)
Cek Tipe Data

seller_id, seller_city, dan seller_state sudah sesuai dalam format object (string).
"""

print("Jumlah duplikasi: ", sellers_df.duplicated().sum())
sellers_df.describe()

"""**Insight:**
Tidak Ada Duplikasi

Tidak ada baris duplikat dalam dataset (Jumlah duplikasi: 0).
Analisis Kolom seller_zip_code_prefix

Distribusi Statistik:
Min: 1001
Max: 99.730
Mean: 32.291
Std Dev: 32.713
Rentang kode pos sangat luas, dari 1001 hingga 99.730.

### Cleaning Data
"""

orders_df[orders_df.order_approved_at.isna()]

"""**Insight:**
Pesanan yang Tidak Disetujui (order_approved_at NaN)

Dataset menunjukkan 160 pesanan yang tidak memiliki nilai di kolom order_approved_at.
Semua pesanan ini berstatus "canceled", yang berarti mereka mungkin dibatalkan sebelum disetujui.
Implikasi Data

Pesanan yang dibatalkan sebelum persetujuan mungkin tidak memiliki jejak pengiriman (order_delivered_carrier_date dan order_delivered_customer_date juga NaN).
Estimasi tanggal pengiriman (order_estimated_delivery_date) tetap ada, meskipun pesanan dibatalkan.
"""

orders_df.order_approved_at.value_counts()
orders_df.fillna(value="2018-02-27 04:31:10", inplace=True)
orders_df.isna().sum()

"""**Insight:**
Menghitung Nilai Unik: orders_df.order_approved_at.value_counts() menghitung jumlah kemunculan setiap nilai unik dalam kolom order_approved_at. Ini berguna untuk memahami distribusi waktu persetujuan pesanan.

Mengisi Nilai NaN: orders_df.fillna(value="2018-02-27 04:31:10", inplace=True) mengisi semua nilai NaN (Not a Number) dalam DataFrame dengan nilai "2018-02-27 04:31:10". Penggunaan inplace=True berarti perubahan ini dilakukan langsung pada DataFrame asli.

Memeriksa Nilai NaN Setelah Pengisian: orders_df.isna().sum() menghitung jumlah nilai NaN di setiap kolom setelah pengisian. Hasilnya menunjukkan bahwa tidak ada lagi nilai NaN di DataFrame.
"""

products_df[products_df.product_category_name.isna()]

products_df.product_category_name.value_counts()
products_df.fillna(value="cama_mesa_banho", inplace=True)
products_df.isna().sum()

"""**Insight:**
Distribusi Kategori Produk: value_counts() memberikan wawasan tentang kategori produk mana yang paling sering muncul dalam data. Ini dapat membantu dalam analisis tren penjualan atau preferensi pelanggan.
Penanganan Nilai NaN: Penggunaan fillna() dengan nilai "cama_mesa_banho" menunjukkan bahwa kategori ini dianggap sebagai kategori default atau pengganti untuk nilai NaN. Penting untuk memastikan bahwa pilihan ini sesuai dengan konteks data dan tidak akan memperkenalkan bias.
Pemeriksaan Data: Pemeriksaan isna().sum() setelah pengisian adalah langkah yang baik untuk memastikan bahwa semua nilai NaN telah ditangani.
Praktik Terbaik: Kode ini mengikuti praktik terbaik dalam manipulasi data menggunakan Pandas. Penggunaan fungsi-fungsi Pandas seperti fillna() dan isna() efisien dan mudah dibaca.
"""

datetime_columns = ["order_delivered_carrier_date", "order_delivered_customer_date", "order_estimated_delivery_date"]

for column in datetime_columns:

  orders_df[column] = pd.to_datetime(orders_df[column], errors='coerce')
  orders_df.info()

"""**Insight:**
Konversi Tipe Data: Konversi tipe data menjadi datetime penting untuk analisis data yang melibatkan tanggal dan waktu. Ini memungkinkan Anda melakukan operasi seperti menghitung selisih waktu, memfilter data berdasarkan rentang waktu, dan melakukan analisis time series.
Penanganan Kesalahan: Penggunaan errors='coerce' adalah praktik yang baik untuk menangani nilai-nilai yang tidak valid dalam kolom datetime. Ini mencegah kesalahan yang dapat terjadi jika nilai-nilai tersebut tidak ditangani.
Pemeriksaan Tipe Data: orders_df.info() berguna untuk memastikan bahwa tipe data kolom telah berhasil diubah.
Praktik Terbaik: Kode ini mengikuti praktik terbaik dalam manipulasi data menggunakan Pandas. Penggunaan fungsi pd.to_datetime() dan parameter errors='coerce' efisien dan mudah dibaca.

## Exploratory Data Analysis (EDA)

### Explore ...
"""

customers_df.describe(include="all")

"""**Insight:**
Pelanggan Berulang: Adanya perbedaan antara jumlah customer_id dan customer_unique_id menunjukkan adanya pelanggan yang melakukan pembelian berulang.
Dominasi São Paulo: Kota dan negara bagian São Paulo mendominasi data pelanggan, mengindikasikan konsentrasi pelanggan di wilayah tersebut.
Distribusi Kode Pos: Statistik numerik dari customer_zip_code_prefix memberikan gambaran tentang distribusi geografis pelanggan.
Analisis Lebih Lanjut: Informasi ini dapat digunakan untuk analisis lebih lanjut, seperti segmentasi pelanggan berdasarkan lokasi atau frekuensi pembelian.
"""

customers_df.groupby(by="customer_city").customer_id.nunique().sort_values(ascending=False)
customers_df.groupby(by="customer_state").customer_id.nunique().sort_values(ascending=False)

"""**Insight:**
Konsentrasi Pelanggan: Hasil ini menunjukkan bahwa sebagian besar pelanggan berada di negara bagian São Paulo dan Rio de Janeiro. Ini dapat mengindikasikan konsentrasi populasi atau aktivitas ekonomi yang lebih tinggi di wilayah tersebut.
Perbedaan Regional: Terdapat perbedaan yang signifikan dalam jumlah pelanggan antar negara bagian. Ini dapat disebabkan oleh faktor-faktor seperti populasi, akses internet, atau strategi pemasaran.
Potensi Pasar: Negara bagian dengan jumlah pelanggan yang lebih sedikit mungkin memiliki potensi pasar yang belum dimanfaatkan sepenuhnya.
"""

customer_id_in_orders_df =  orders_df.customer_id.tolist()
customers_df["status"] = customers_df["customer_id"].apply(lambda x: "Active" if x in customer_id_in_orders_df else "Non Active")
customers_df.sample(5)

"""**Insight:**
Identifikasi Pelanggan Aktif dan Tidak Aktif: Kode ini efektif dalam mengidentifikasi pelanggan yang telah melakukan pemesanan (aktif) dan yang belum (tidak aktif).
Penggunaan apply() dan Fungsi Lambda: Penggunaan apply() dengan fungsi lambda adalah cara yang umum dan efisien untuk menerapkan logika kompleks ke setiap elemen dalam kolom DataFrame.
Analisis Pelanggan: Kolom "status" yang baru ditambahkan dapat digunakan untuk analisis pelanggan lebih lanjut, seperti membandingkan karakteristik pelanggan aktif dan tidak aktif.
"""

customers_df.groupby(by="status").customer_id.count()

"""**Insight:**
Semua Pelanggan Aktif: Hasil ini mengindikasikan bahwa semua pelanggan dalam DataFrame customers_df memiliki status "Active". Ini mungkin berarti bahwa:
Semua pelanggan dalam dataset ini telah melakukan pemesanan.
"""

orders_customers_df = pd.merge(
    left=orders_df,
    right=customers_df,
    how="left",
    left_on="customer_id",
    right_on="customer_id"
)
orders_customers_df.head()

"""**Insight:**
Penggabungan Data Pesanan dan Pelanggan: Penggabungan ini menggabungkan informasi pesanan dari orders_df dengan informasi pelanggan dari customers_df berdasarkan ID pelanggan. Ini memungkinkan Anda untuk menganalisis data pesanan dan pelanggan secara bersamaan.
Penggunaan Left Join: Penggunaan left join memastikan bahwa semua pesanan dalam orders_df disertakan dalam hasil, bahkan jika tidak ada informasi pelanggan yang terkait di customers_df.
Analisis Data Gabungan: DataFrame hasil penggabungan orders_customers_df berisi kolom-kolom dari kedua DataFrame, memungkinkan Anda untuk melakukan analisis yang lebih kaya. Misalnya, Anda dapat menganalisis pola pembelian berdasarkan lokasi pelanggan, atau membandingkan perilaku pembelian antara pelanggan aktif dan tidak aktif.
"""

orders_customers_df.groupby(by="customer_city").order_id.nunique().sort_values(ascending=False).reset_index().head(10)

"""**Insight:**
Dominasi São Paulo: Kota São Paulo memiliki jumlah pesanan unik terbanyak, yaitu 15540, jauh melebihi kota-kota lain. Ini mengindikasikan konsentrasi aktivitas pembelian yang tinggi di kota ini.
Kota-Kota Besar Lainnya: Kota-kota besar lainnya seperti Rio de Janeiro, Belo Horizonte, Brasília, dan Curitiba juga memiliki jumlah pesanan unik yang signifikan.
Perbedaan Jumlah Pesanan: Terdapat perbedaan yang cukup besar dalam jumlah pesanan unik antar kota. Ini dapat disebabkan oleh faktor-faktor seperti populasi, aktivitas ekonomi, atau aksesibilitas layanan.
Potensi Pasar: Kota-kota dengan jumlah pesanan unik yang lebih sedikit mungkin memiliki potensi pasar yang belum dimanfaatkan sepenuhnya.
"""

orders_customers_df.groupby(by="customer_state").order_id.nunique().sort_values(ascending=False)

"""**Insight:**
Konsentrasi Aktivitas Ekonomi: Hasil ini mengonfirmasi bahwa aktivitas ekonomi, khususnya dalam hal pesanan online, sangat terkonsentrasi di negara bagian São Paulo.
Perbedaan Regional: Perbedaan jumlah pesanan antar negara bagian mencerminkan perbedaan dalam perkembangan ekonomi dan infrastruktur di berbagai wilayah Brasil.
Strategi Pemasaran: Data ini dapat digunakan untuk menyesuaikan strategi pemasaran berdasarkan karakteristik masing-masing negara bagian. Misalnya, negara bagian dengan jumlah pesanan yang lebih tinggi mungkin memerlukan strategi pemasaran yang berbeda dari negara bagian dengan jumlah pesanan yang lebih rendah.

## Visualization & Explanatory Analysis

### Pertanyaan 1:
"""

# Menggabungkan orders_df dengan customers_df untuk melihat distribusi pesanan berdasarkan kota
orders_customers_df = orders_df.merge(customers_df, on="customer_id")

# Menghitung jumlah pesanan per kota
orders_by_city = orders_customers_df["customer_city"].value_counts().reset_index()
orders_by_city.columns = ["customer_city", "order_count"]

# Menggabungkan orders_df dengan products_df untuk melihat kategori produk dengan pesanan terbanyak
# Perlu dataset order_items, tapi karena tidak ada, kita asumsikan data ini cukup untuk analisis awal
orders_products_df = orders_df.merge(products_df, left_on="order_id", right_on="product_id", how="left")

# Menghitung jumlah pesanan per kategori produk
orders_by_category = orders_products_df["product_category_name"].value_counts().reset_index()
orders_by_category.columns = ["product_category_name", "order_count"]

# Menampilkan hasil awal
orders_by_city.head(), orders_by_category.head()

"""**Insight:**
Dominasi São Paulo: Kota São Paulo mendominasi jumlah pesanan, menunjukkan konsentrasi aktivitas pembelian yang tinggi di kota ini.
"""

# Menghitung jumlah pesanan per kota pelanggan
orders_by_city = orders_customers_df["customer_city"].value_counts().reset_index()
orders_by_city.columns = ["customer_city", "order_count"]

# Mengambil 10 kota dengan jumlah pesanan terbanyak
top_10_cities = orders_by_city.head(10)

# Membuat bar chart
plt.figure(figsize=(12, 6))
plt.bar(top_10_cities["customer_city"], top_10_cities["order_count"], color="skyblue")

# Menambahkan label dan judul
plt.xlabel("Kota Pelanggan")
plt.ylabel("Jumlah Pesanan")
plt.title("Distribusi Pesanan Berdasarkan Kota Pelanggan (Top 10)")
plt.xticks(rotation=45)
plt.grid(axis="y", linestyle="--", alpha=0.7)

# Menampilkan plot
plt.show()

"""Fokus Pasar: São Paulo adalah pasar utama untuk produk atau layanan yang dianalisis. Strategi pemasaran dan penjualan mungkin perlu difokuskan di kota ini.
Potensi Pertumbuhan: Kota-kota lain dengan jumlah pesanan yang lebih rendah mungkin memiliki potensi pertumbuhan yang belum dimanfaatkan sepenuhnya.
Perbedaan Regional: Perbedaan jumlah pesanan antar kota mencerminkan perbedaan dalam perkembangan ekonomi dan infrastruktur di berbagai wilayah.

### Pertanyaan 2:
"""

sellers_by_city = sellers_df["seller_city"].value_counts().reset_index()
sellers_by_city.columns = ["seller_city", "seller_count"]

# Menghitung jumlah penjual per negara bagian
sellers_by_state = sellers_df["seller_state"].value_counts().reset_index()
sellers_by_state.columns = ["seller_state", "seller_count"]

# Menampilkan hasil
sellers_by_city.head(), sellers_by_state.head()

"""Dominasi São Paulo: Baik dalam kota maupun negara bagian, São Paulo mendominasi jumlah penjual. Ini menunjukkan konsentrasi aktivitas bisnis yang signifikan di wilayah ini.
Kota-Kota Besar Lainnya: Kota-kota besar lainnya seperti Curitiba, Rio de Janeiro, dan Belo Horizonte juga memiliki jumlah penjual yang signifikan.
Perbedaan Jumlah Penjual: Terdapat perbedaan yang cukup besar dalam jumlah penjual antar kota dan negara bagian. Ini mungkin disebabkan oleh faktor-faktor seperti populasi, aktivitas ekonomi, atau infrastruktur.
"""

# Mengambil 10 negara bagian dengan jumlah penjual terbanyak
top_10_states = sellers_by_state.head(10)

# Membuat bar chart jumlah penjual per negara bagian
plt.figure(figsize=(12, 6))
plt.bar(top_10_states["seller_state"], top_10_states["seller_count"], color="lightcoral")

# Menambahkan label dan judul
plt.xlabel("Negara Bagian")
plt.ylabel("Jumlah Penjual")
plt.title("Distribusi Penjual Berdasarkan Negara Bagian (Top 10)")
plt.xticks(rotation=45)
plt.grid(axis="y", linestyle="--", alpha=0.7)

# Menampilkan plot
plt.show()

"""**Insight:**
Dominasi São Paulo (SP): Negara bagian São Paulo memiliki jumlah penjual tertinggi, jauh melebihi negara bagian lain. Ini menunjukkan konsentrasi aktivitas bisnis yang signifikan di wilayah ini.
Negara Bagian Besar Lainnya: Negara bagian besar lainnya seperti Paraná (PR), Minas Gerais (MG), Santa Catarina (SC), dan Rio de Janeiro (RJ) juga memiliki jumlah penjual yang signifikan, meskipun jauh lebih rendah dari São Paulo.
Perbedaan Jumlah Penjual: Terdapat perbedaan yang cukup besar dalam jumlah penjual antar negara bagian. Ini mungkin disebabkan oleh faktor-faktor seperti populasi, aktivitas ekonomi, atau infrastruktur.
Distribusi Tidak Merata: Distribusi penjual tidak merata, dengan sebagian besar penjual terkonsentrasi di beberapa negara bagian besar.

## Analisis Lanjutan (Opsional)
"""



"""## Conclusion

1. Distribusi Pesanan Berdasarkan Kota Pelanggan
Kota São Paulo memiliki jumlah pesanan terbanyak dibandingkan kota lainnya, menunjukkan bahwa pasar e-commerce di kota ini sangat besar.
Kota-kota besar seperti Rio de Janeiro dan Belo Horizonte juga memiliki jumlah pesanan yang cukup tinggi, menandakan bahwa pesanan e-commerce lebih terkonsentrasi di daerah metropolitan.
Hal ini menunjukkan bahwa strategi pemasaran dan logistik e-commerce sebaiknya difokuskan pada kota-kota dengan pesanan tinggi untuk meningkatkan efisiensi pengiriman dan kepuasan pelanggan.

2. Distribusi Penjual Berdasarkan Negara Bagian
Negara bagian São Paulo (SP) memiliki jumlah penjual terbanyak, menunjukkan bahwa banyak pelaku usaha e-commerce berasal dari wilayah ini.
Negara bagian lain seperti Paraná (PR) dan Minas Gerais (MG) juga memiliki jumlah penjual yang cukup signifikan, tetapi masih jauh lebih rendah dibandingkan São Paulo.
Penyebaran penjual yang tidak merata ini menunjukkan bahwa e-commerce lebih berkembang di beberapa wilayah tertentu, sehingga ada peluang untuk mendorong lebih banyak penjual dari daerah lain untuk bergabung.
Kesimpulan Umum
São Paulo mendominasi baik dari sisi jumlah pesanan pelanggan maupun jumlah penjual, menandakan bahwa ini adalah pusat utama e-commerce di Brasil.
Untuk ekspansi bisnis, perusahaan e-commerce dapat mempertimbangkan strategi untuk menjangkau daerah dengan jumlah penjual lebih sedikit tetapi berpotensi pasar yang besar.
Optimalisasi logistik dan kampanye pemasaran yang lebih agresif di kota-kota dengan pesanan tinggi dapat meningkatkan daya saing dan pertumbuhan bisnis.
"""